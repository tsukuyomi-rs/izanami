parameters:
  name: ''
  vmImage: ''
  strategy:
    matrix:
      stable:
        rust_toolchain: stable
  variables: {}
  before_script: []
  after_script: []

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    ${{ insert }}: ${{ parameters.strategy }}
  variables:
    ${{ insert }}: ${{ parameters.variables }}
  steps:
  - ${{ parameters.before_script }}

  - ${{ if eq(parameters.name, 'Windows') }}:
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain %RUST_TOOLCHAIN%
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo '##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin'
      displayName: 'install rustup on Windows platform'

  - ${{ if ne(parameters.name, 'Windows') }}:
    - script: |
        curl -sSf https://sh.rustup.rs | sh -s -- --default-toolchain $RUST_TOOLCHAIN -y
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: 'install rustup on Unix platform'

  - script: |
      rustup component add rustfmt clippy
    displayName: 'install supplemental components'
    condition: eq(variables['rust_toolchain'], 'stable')

  - script: |
      rustup --version
      rustc --version
      cargo --version
    displayName: 'show toolchain version'

  - bash: .ci/scripts/run-test.sh
    displayName: 'run test'
    condition: ne(variables['rust_toolchain'], 'nightly')

  - bash: .ci/scripts/run-test.sh
    displayName: 'run test (allow failure)'
    continueOnError: true
    condition: eq(variables['rust_toolchain'], 'nightly')

  - ${{ parameters.after_script }}
